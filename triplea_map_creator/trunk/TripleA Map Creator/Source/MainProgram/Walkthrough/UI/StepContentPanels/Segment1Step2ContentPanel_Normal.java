/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Segment1Step1ContentPanel.java
 *
 * Created on May 14, 2010, 5:34:30 PM
 */

package MainProgram.Walkthrough.UI.StepContentPanels;

import Global.Constants;
import Global.ProgramSettings;
import MainProgram.Console.ErrorConsole;
import MainProgram.Image.ImageUndoStep;
import MainProgram.UI.FileOpen;
import MainProgram.Walkthrough.UI.ImageResizeWindow;
import Threading.BackgroundTaskRunner;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.TreeMap;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import org.jdesktop.application.Action;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

/**
 *
 * @author Stephen
 */
public class Segment1Step2ContentPanel_Normal extends BaseStepContentPanel {

    private BufferedImage m_image = null;
    private Graphics2D m_graphics = null;
    private int m_toolType = 0;
    /** Creates new form Segment1Step1ContentPanel */
    public Segment1Step2ContentPanel_Normal()
    {
        initComponents();
        //InitKeyListeners();
    }
    @Override
    public boolean WaitForPanelClose()
    {
        return true;
    }
    @Override
    public void InitControls()
    {
        BufferedImage image;
        if (m_walkthroughWindow.GetProject().GetMapData().GetBaseMapImage() != null)
        {
            Image sImage = m_walkthroughWindow.GetProject().GetMapData().GetBaseMapImage().getImage();
            SetImage(sImage);
        }
        else
        {
            image = new BufferedImage(800, 400, BufferedImage.TYPE_INT_ARGB);
            Graphics2D g = image.createGraphics();
            g.setColor(Color.WHITE);
            g.fillRect(0, 0, 800, 600);
            SetImage(image);
            SaveBackupPoint(new Rectangle(0,0,image.getWidth(),image.getHeight()), image, true);
        }
        ScrollPaneToLastMapPos(v_scrollPane);
        UpdateUndoRedoControls();
    }
    @Override
    public void ProcessControlContentToMapData()
    {
        m_walkthroughWindow.GetProject().GetMapData().SetBaseMapImage(new ImageIcon(m_image));
        m_walkthroughWindow.GetProject().GetProjectInfo().LastMapDisplayAreaPoint = v_scrollPane.getViewport().getViewPosition();
    }
    public void AlertKeyPressed(java.awt.event.KeyEvent e)
    {
        if (e.isControlDown())
        {
            if (e.getKeyCode() == e.VK_Z)
            {
                if (v_undoButton.isEnabled())
                {
                    UndoClick();
                }
            }
            else if (e.getKeyCode() == e.VK_Y)
            {
                if (v_redoButton.isEnabled())
                {
                    RedoClick();
                }
            }
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    Point m_origScrollPoint = new Point(0,0);
    Point m_lastPoint = new Point(0,0);
    Boolean m_mouseDown = false;
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        v_toolbarPanel = new javax.swing.JPanel();
        v_toolSizeSlider = new javax.swing.JSlider();
        v_loadImageButton = new javax.swing.JButton();
        v_colorButton = new javax.swing.JButton();
        v_penButton = new javax.swing.JButton();
        v_clearImageButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        v_redoButton = new javax.swing.JButton();
        v_undoButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        v_resizeButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        v_eraseButton = new javax.swing.JButton();
        v_fillButton = new javax.swing.JButton();
        v_lineButton = new javax.swing.JButton();
        v_scrollPane = new javax.swing.JScrollPane();
        v_scrollPanePanel = new javax.swing.JPanel();
        v_drawingLabel = new javax.swing.JLabel();

        v_toolbarPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        v_toolbarPanel.setName("v_toolbarPanel"); // NOI18N
        v_toolbarPanel.setPreferredSize(new java.awt.Dimension(725, 62));
        v_toolbarPanel.setRequestFocusEnabled(false);
        v_toolbarPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        v_toolSizeSlider.setMaximum(5);
        v_toolSizeSlider.setMinimum(1);
        v_toolSizeSlider.setSnapToTicks(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(Segment1Step2ContentPanel_Normal.class);
        v_toolSizeSlider.setToolTipText(resourceMap.getString("v_toolSizeSlider.toolTipText")); // NOI18N
        v_toolSizeSlider.setValue(1);
        v_toolSizeSlider.setName("v_toolSizeSlider"); // NOI18N
        v_toolSizeSlider.setNextFocusableComponent(v_undoButton);
        v_toolSizeSlider.setPreferredSize(null);
        v_toolSizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                v_toolSizeSliderStateChanged(evt);
            }
        });
        v_toolbarPanel.add(v_toolSizeSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 35, 50, 20));

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(Segment1Step2ContentPanel_Normal.class, this);
        v_loadImageButton.setAction(actionMap.get("LoadImage")); // NOI18N
        v_loadImageButton.setFont(resourceMap.getFont("v_loadImageButton.font")); // NOI18N
        v_loadImageButton.setText(resourceMap.getString("v_loadImageButton.text")); // NOI18N
        v_loadImageButton.setToolTipText(resourceMap.getString("v_loadImageButton.toolTipText")); // NOI18N
        v_loadImageButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        v_loadImageButton.setName("v_loadImageButton"); // NOI18N
        v_toolbarPanel.add(v_loadImageButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 3, 55, 55));

        v_colorButton.setAction(actionMap.get("ColorClicked")); // NOI18N
        v_colorButton.setBackground(resourceMap.getColor("v_colorButton.background")); // NOI18N
        v_colorButton.setFont(resourceMap.getFont("v_colorButton.font")); // NOI18N
        v_colorButton.setForeground(resourceMap.getColor("v_colorButton.foreground")); // NOI18N
        v_colorButton.setText(resourceMap.getString("v_colorButton.text")); // NOI18N
        v_colorButton.setToolTipText(resourceMap.getString("v_colorButton.toolTipText")); // NOI18N
        v_colorButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        v_colorButton.setName("v_colorButton"); // NOI18N
        v_colorButton.setNextFocusableComponent(v_toolSizeSlider);
        v_toolbarPanel.add(v_colorButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(378, 3, 50, 25));

        v_penButton.setAction(actionMap.get("PenClicked")); // NOI18N
        v_penButton.setBackground(resourceMap.getColor("v_penButton.background")); // NOI18N
        v_penButton.setFont(resourceMap.getFont("v_loadImageButton.font")); // NOI18N
        v_penButton.setText(resourceMap.getString("v_penButton.text")); // NOI18N
        v_penButton.setToolTipText(resourceMap.getString("v_penButton.toolTipText")); // NOI18N
        v_penButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        v_penButton.setName("v_penButton"); // NOI18N
        v_toolbarPanel.add(v_penButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 3, 55, 55));

        v_clearImageButton.setAction(actionMap.get("ClearScreen")); // NOI18N
        v_clearImageButton.setFont(resourceMap.getFont("v_loadImageButton.font")); // NOI18N
        v_clearImageButton.setText(resourceMap.getString("v_clearImageButton.text")); // NOI18N
        v_clearImageButton.setToolTipText(resourceMap.getString("v_clearImageButton.toolTipText")); // NOI18N
        v_clearImageButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        v_clearImageButton.setName("v_clearImageButton"); // NOI18N
        v_toolbarPanel.add(v_clearImageButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(62, 3, 55, 55));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(4, 68));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 57, Short.MAX_VALUE)
        );

        v_toolbarPanel.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(122, 0, 4, 61));

        v_redoButton.setAction(actionMap.get("RedoClick")); // NOI18N
        v_redoButton.setFont(resourceMap.getFont("v_loadImageButton.font")); // NOI18N
        v_redoButton.setText(resourceMap.getString("v_redoButton.text")); // NOI18N
        v_redoButton.setToolTipText(resourceMap.getString("v_redoButton.toolTipText")); // NOI18N
        v_redoButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        v_redoButton.setName("v_redoButton"); // NOI18N
        v_redoButton.setNextFocusableComponent(v_resizeButton);
        v_toolbarPanel.add(v_redoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 3, 35, 27));

        v_undoButton.setAction(actionMap.get("UndoClick")); // NOI18N
        v_undoButton.setFont(resourceMap.getFont("v_loadImageButton.font")); // NOI18N
        v_undoButton.setText(resourceMap.getString("v_undoButton.text")); // NOI18N
        v_undoButton.setToolTipText(resourceMap.getString("v_undoButton.toolTipText")); // NOI18N
        v_undoButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        v_undoButton.setName("v_undoButton"); // NOI18N
        v_undoButton.setNextFocusableComponent(v_redoButton);
        v_toolbarPanel.add(v_undoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 3, 35, 27));

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setName("jPanel4"); // NOI18N
        jPanel4.setPreferredSize(new java.awt.Dimension(4, 68));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 57, Short.MAX_VALUE)
        );

        v_toolbarPanel.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(434, 0, 4, 61));

        v_resizeButton.setAction(actionMap.get("ResizeImage")); // NOI18N
        v_resizeButton.setFont(resourceMap.getFont("v_loadImageButton.font")); // NOI18N
        v_resizeButton.setText(resourceMap.getString("v_resizeButton.text")); // NOI18N
        v_resizeButton.setToolTipText(resourceMap.getString("v_resizeButton.toolTipText")); // NOI18N
        v_resizeButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        v_resizeButton.setName("v_resizeButton"); // NOI18N
        v_toolbarPanel.add(v_resizeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 33, 75, 25));

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setPreferredSize(new java.awt.Dimension(4, 68));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 57, Short.MAX_VALUE)
        );

        v_toolbarPanel.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 0, 4, 61));

        v_eraseButton.setAction(actionMap.get("EraserClicked")); // NOI18N
        v_eraseButton.setFont(resourceMap.getFont("v_loadImageButton.font")); // NOI18N
        v_eraseButton.setText(resourceMap.getString("v_eraseButton.text")); // NOI18N
        v_eraseButton.setToolTipText(resourceMap.getString("v_eraseButton.toolTipText")); // NOI18N
        v_eraseButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        v_eraseButton.setName("v_eraseButton"); // NOI18N
        v_toolbarPanel.add(v_eraseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 3, 55, 55));

        v_fillButton.setAction(actionMap.get("FillClicked")); // NOI18N
        v_fillButton.setFont(resourceMap.getFont("v_loadImageButton.font")); // NOI18N
        v_fillButton.setText(resourceMap.getString("v_fillButton.text")); // NOI18N
        v_fillButton.setToolTipText(resourceMap.getString("v_fillButton.toolTipText")); // NOI18N
        v_fillButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        v_fillButton.setName("v_fillButton"); // NOI18N
        v_toolbarPanel.add(v_fillButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 3, 55, 55));

        v_lineButton.setAction(actionMap.get("LineClicked")); // NOI18N
        v_lineButton.setFont(resourceMap.getFont("v_loadImageButton.font")); // NOI18N
        v_lineButton.setText(resourceMap.getString("v_lineButton.text")); // NOI18N
        v_lineButton.setToolTipText(resourceMap.getString("v_lineButton.toolTipText")); // NOI18N
        v_lineButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        v_lineButton.setName("v_lineButton"); // NOI18N
        v_toolbarPanel.add(v_lineButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 3, 55, 55));

        v_scrollPane.setAutoscrolls(true);
        v_scrollPane.setName("v_scrollPane"); // NOI18N

        v_scrollPanePanel.setAutoscrolls(true);
        v_scrollPanePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        v_scrollPanePanel.setMinimumSize(new java.awt.Dimension(0, 0));
        v_scrollPanePanel.setName("v_scrollPanePanel"); // NOI18N
        v_scrollPanePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawingMouseDown(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                drawingMouseReleased(evt);
            }
        });
        v_scrollPanePanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawingMouseDragged(evt);
            }
        });
        v_scrollPanePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        v_drawingLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        v_drawingLabel.setName("v_drawingLabel"); // NOI18N
        v_drawingLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawingMouseDown(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                drawingMouseReleased(evt);
            }
        });
        v_drawingLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawingMouseDragged(evt);
            }
        });
        v_scrollPanePanel.add(v_drawingLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 400));

        v_scrollPane.setViewportView(v_scrollPanePanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(v_toolbarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 882, Short.MAX_VALUE)
            .addComponent(v_scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 882, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(v_scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(v_toolbarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    Color m_currentColor = Color.BLACK;
    private void drawingMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_drawingMouseDragged
    {//GEN-HEADEREND:event_drawingMouseDragged
        if (m_origScrollPoint == null)
        {
            if (m_mouseDown)
            {
                if (m_toolType == 0)
                {
                    m_graphics.drawLine(m_lastPoint.x, m_lastPoint.y, evt.getX(), evt.getY());
                    m_lastPoint = evt.getPoint();
                    m_mouseDrawingRect = GetRectangleWithExtenderPoint(m_mouseDrawingRect, evt.getPoint());
                }
                else if (m_toolType == 2)
                {
                    m_graphics.drawLine(m_lastPoint.x, m_lastPoint.y, evt.getX(), evt.getY());
                    m_lastPoint = evt.getPoint();
                    m_mouseDrawingRect = GetRectangleWithExtenderPoint(m_mouseDrawingRect, evt.getPoint());
                }
                else if (m_toolType == 3)
                {
                    m_graphics.drawImage(m_image, 0, 0, this);
                    if(evt.isShiftDown())
                    {
                        int ex = 0;
                        int ey = 0;

                        int xDif = evt.getX() - m_lastPoint.x;
                        int yDif = evt.getY() - m_lastPoint.y;
                        Boolean xDifMoreThanY = pos(xDif) > pos(yDif);

                        if(xDifMoreThanY)
                        {
                            ey = m_lastPoint.y;
                            ex = evt.getX();
                        }
                        else
                        {
                            ex = m_lastPoint.x;
                            ey = evt.getY();
                        }
                        m_graphics.drawLine(m_lastPoint.x, m_lastPoint.y, ex, ey);
                    }
                    else
                    {
                        m_graphics.drawLine(m_lastPoint.x, m_lastPoint.y, evt.getX(), evt.getY());
                    }
                }
            }
        }
        if (m_origScrollPoint != null && evt.getButton() != evt.BUTTON1 && (v_drawingLabel.getWidth() > v_scrollPane.getWidth() || v_drawingLabel.getHeight() > v_scrollPane.getHeight()))
        {
            if(m_lastPoint == null) //Mouse held from another step
                return;
            v_drawingLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            v_scrollPane.getViewport().setViewPosition(LimitedImagePoint(new Point(m_origScrollPoint.x + (m_lastPoint.x - evt.getXOnScreen()), m_origScrollPoint.y + (m_lastPoint.y - evt.getYOnScreen()))));
        }
    }//GEN-LAST:event_drawingMouseDragged
    private void drawingMouseDown(java.awt.event.MouseEvent evt)//GEN-FIRST:event_drawingMouseDown
    {//GEN-HEADEREND:event_drawingMouseDown
        if (evt.getButton() == evt.BUTTON1)
        {
            if(m_toolType == 0 || m_toolType == 2)
            {
                m_oldImage = ClonedImage(m_image);
                m_mouseDrawingRect = GetRectangleWithExtenderPoint(new Rectangle(0,0,1,1), evt.getPoint());
            }
            if (evt.isControlDown() && evt.getX() < m_image.getWidth() && evt.getY() < m_image.getHeight())
            {
                m_currentColor = Constants.GetRGBColor(m_image.getRGB(evt.getX(), evt.getY()));
                v_colorButton.setBackground(m_currentColor);
                return;
            }
            m_origScrollPoint = null;
            m_lastPoint = evt.getPoint();
            if(m_toolType == 3)
            {
                m_tempImage = ClonedImage(m_image);
                m_graphics = m_tempImage.createGraphics();
                v_drawingLabel.setIcon(new ImageIcon(m_tempImage));
            }
            m_mouseDown = true;
            m_graphics.setColor(m_currentColor);
            if (m_toolType == 2)
            {
                m_graphics.setColor(Color.WHITE);
                m_graphics.setStroke(new BasicStroke(v_toolSizeSlider.getValue() * 3, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
            }
            else
            {
                if (v_toolSizeSlider.getValue() != ((BasicStroke) m_graphics.getStroke()).getLineWidth())
                {
                    m_graphics.setStroke(new BasicStroke(v_toolSizeSlider.getValue(), BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
                }
            }
        }
        else
        {
            m_origScrollPoint = v_scrollPane.getViewport().getViewPosition();
            m_lastPoint = evt.getLocationOnScreen();
        }
    }//GEN-LAST:event_drawingMouseDown
    private Point LimitedImagePoint(Point p)
    {
        Point r = new Point(p.x + v_scrollPane.getViewport().getWidth() < m_image.getWidth() ? p.x : m_image.getWidth() - 1 - v_scrollPane.getViewport().getWidth(),p.y + v_scrollPane.getViewport().getHeight() < m_image.getHeight() ? p.y : m_image.getHeight() - 1 - v_scrollPane.getViewport().getHeight());
        return new Point(r.x > 0 ? r.x : 0, r.y > 0 ? r.y : 0);
    }
    private Point LimitedLabelPoint(Point p)
    {
        Point r = new Point(p.x < m_image.getWidth() ? p.x : m_image.getWidth() - 1, p.y < m_image.getHeight() ? p.y : m_image.getHeight() - 1);
        return new Point(r.x > 0 ? r.x : 0, r.y > 0 ? r.y : 0);
    }
    private int pos(int i)
    {
        if (i < 0)
        {
            return -i;
        }
        return i;
    }
    BufferedImage m_tempImage = null;
    BufferedImage m_oldImage = null;
    Rectangle m_mouseDrawingRect = new Rectangle(0,0,1,1);
    public Rectangle GetRectangleWithExtenderPoint(Rectangle base, Point p)
    {
        int lx = 0;
        int ly = 0;
        int hx = 0;
        int hy = 0;
        lx = FindLower(base.x, p.x);
        hx = FindHigher(base.x + base.width, p.x);
        ly = FindLower(base.y, p.y);
        hy = FindHigher(base.y + base.height, p.y);
        return new Rectangle(lx, ly, hx - lx + 1, hy - ly + 1);
    }
    private void drawingMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_drawingMouseReleased
    {//GEN-HEADEREND:event_drawingMouseReleased
        v_drawingLabel.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
        if (m_origScrollPoint == null)
        {
            final MouseEvent mEvt = evt;
            final Rectangle bounds = new Rectangle();
            if (m_toolType == 1 && evt.getX() < m_image.getWidth() && evt.getY() < m_image.getHeight())
            {
                Runnable runner = new Runnable()
                {
                    public void run()
                    {
                        int lx = 0;
                        int ly = 0;
                        int hx = 0;
                        int hy = 0;
                        m_oldImage = ClonedImage(m_image);
                        if (m_image.getRGB(mEvt.getPoint().x, mEvt.getPoint().y) == m_currentColor.getRGB())
                        {
                            return;
                        }
                        ArrayList<Point> pixels = FindConnectedPixels(m_image, mEvt.getPoint());
                        for (Point p : pixels)
                        {
                            if(BackgroundTaskRunner.s_shouldStopBT)
                                return;

                            if (p.x < lx)
                                lx = p.x;
                            if (p.y < ly)
                                ly = p.y;
                            if (p.x > hx)
                                hx = p.x;
                            if (p.y > hy)
                                hy = p.y;

                            m_image.setRGB(p.x, p.y, m_currentColor.getRGB());
                        }
                        bounds.x = lx;
                        bounds.y = ly;
                        bounds.width = hx - lx + 1;
                        bounds.height = hy - ly + 1;
                    }
                };
                if(!BackgroundTaskRunner.runInBackground(this, "Calculating fill area...", runner, true))
                    return;
            }
            else if (m_toolType == 3)
            {
                int lx = 0;
                int ly = 0;
                int hx = 0;
                int hy = 0;
                m_oldImage = ClonedImage(m_image);
                SetImage(m_image);
                if (evt.isShiftDown())
                {
                    int ex = 0;
                    int ey = 0;

                    int xDif = evt.getX() - m_lastPoint.x;
                    int yDif = evt.getY() - m_lastPoint.y;
                    Boolean xDifMoreThanY = pos(xDif) > pos(yDif);

                    if (xDifMoreThanY)
                    {
                        ey = m_lastPoint.y;
                        ex = evt.getX();
                    }
                    else
                    {
                        ex = m_lastPoint.x;
                        ey = evt.getY();
                    }
                    m_graphics.drawLine(m_lastPoint.x, m_lastPoint.y, ex, ey);
                    lx = FindLower(m_lastPoint.x,ex);
                    hx = FindHigher(m_lastPoint.x,ex);
                    ly = FindLower(m_lastPoint.y, ey);
                    hy = FindHigher(m_lastPoint.y, ey);
                }
                else
                {
                    m_graphics.drawLine(m_lastPoint.x, m_lastPoint.y, evt.getX(), evt.getY());
                    lx = FindLower(m_lastPoint.x,evt.getX());
                    hx = FindHigher(m_lastPoint.x,evt.getX());
                    ly = FindLower(m_lastPoint.y, evt.getY());
                    hy = FindHigher(m_lastPoint.y, evt.getY());
                }
                bounds.x = lx;
                bounds.y = ly;
                bounds.width = hx - lx + 1;
                bounds.height = hy - ly + 1;
            }
            Rectangle finalBounds = new Rectangle(bounds);
            if(m_toolType == 0)
            {
                finalBounds = InflatedRect(m_mouseDrawingRect,v_toolSizeSlider.getValue());
            }
            else if(m_toolType == 2)
            {
                finalBounds = InflatedRect(m_mouseDrawingRect,v_toolSizeSlider.getValue() * 3);
            }
            else if(m_toolType == 3)
            {
                finalBounds = InflatedRect(bounds,v_toolSizeSlider.getValue());
            }
            if(finalBounds.width < 1 || finalBounds.height < 1)
                return;
            v_drawingLabel.update(v_drawingLabel.getGraphics());
            SaveBackupPoint(finalBounds, m_oldImage, false);
            GetMapData().SetBaseImageBackupsIndex(GetMapData().GetBaseImageBackups().size() - 1);
            UpdateUndoRedoControls();
            m_lastPoint = null;
            m_mouseDown = false;
        }
    }//GEN-LAST:event_drawingMouseReleased
    private void v_toolSizeSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_v_toolSizeSliderStateChanged
    {//GEN-HEADEREND:event_v_toolSizeSliderStateChanged
    }//GEN-LAST:event_v_toolSizeSliderStateChanged
    private Rectangle InflatedRect(Rectangle old, int amountOnEachSide)
    {
        return new Rectangle(old.x - amountOnEachSide, old.y - amountOnEachSide, old.width + amountOnEachSide * 2, old.height + amountOnEachSide * 2);
    }
    private int FindLower(int a, int b)
    {
        if(a < b)
            return a;
        else
            return b;
    }
    private int FindHigher(int a, int b)
    {
        if(a > b)
            return a;
        else
            return b;
    }
    private void SaveBackupPoint(Rectangle block, BufferedImage oldImage, Boolean complete)
    {
        CutRedoes();
        if (GetMapData().GetBaseImageBackups().size() >= ProgramSettings.LoadSettings().StepHistoryMaxSize)
        {
            CutToSize();
        }
        GetMapData().GetBaseImageBackups().add(CreateUndoStep(block, oldImage, complete));
        GetMapData().SetBaseImageBackupsIndex(GetMapData().GetBaseImageBackups().size() - 1);
    }
    private void SaveBackupPoint(BufferedImage oldImage)
    {
        SaveBackupPoint(new Rectangle(0, 0, m_image.getWidth(), m_image.getHeight()), oldImage, true);
    }
    private ImageUndoStep CreateUndoStep(Rectangle uBlock, BufferedImage oldImage, Boolean complete)
    {
        if(complete == null)
        {
            return new ImageUndoStep(null, null, uBlock, null, new Rectangle(0,0,m_image.getWidth(), m_image.getHeight()));
        }
        else
        {
            BufferedImage undoImage = new BufferedImage(uBlock.width, uBlock.height, BufferedImage.TYPE_INT_ARGB);
            BufferedImage redoImage = new BufferedImage(uBlock.width, uBlock.height, BufferedImage.TYPE_INT_ARGB);
            redoImage.getGraphics().drawImage(m_image, 0, 0, uBlock.width, uBlock.height, uBlock.x, uBlock.y, uBlock.width + uBlock.x, uBlock.height + uBlock.y, this);
            undoImage.getGraphics().drawImage(oldImage, 0, 0, uBlock.width, uBlock.height, uBlock.x, uBlock.y, uBlock.width + uBlock.x, uBlock.height + uBlock.y, this);
            return new ImageUndoStep(new ImageIcon(undoImage), new ImageIcon(redoImage), uBlock, complete, new Rectangle(0, 0, oldImage.getWidth(), oldImage.getHeight()));
        }
    }
    private void UpdateUndoRedoControls()
    {
        if(GetMapData().GetBaseImageBackups().size() > 0)
        {
            v_undoButton.setEnabled((GetMapData().GetBaseImageBackupsIndex() > 0));
            v_redoButton.setEnabled((GetMapData().GetBaseImageBackupsIndex() < GetMapData().GetBaseImageBackups().size() - 1));
        }
    }
    private void CutToSize()
    {
        while(GetMapData().GetBaseImageBackups().size() > ProgramSettings.LoadSettings().StepHistoryMaxSize - 1)
        {
            GetMapData().GetBaseImageBackups().remove(0);
        }
    }
    private void CutRedoes()
    {
        while(GetMapData().GetBaseImageBackups().size() - 1 > GetMapData().GetBaseImageBackupsIndex())
        {
            GetMapData().GetBaseImageBackups().remove(GetMapData().GetBaseImageBackups().size() - 1);
        }
    }
    private ArrayList<Point> FindConnectedPixels(BufferedImage image, Point point)
    {
        ArrayList<Point> result = new ArrayList<Point>();
        ArrayList<Point> ptsf = new ArrayList<Point>();
        TreeMap<String, Point> scanned = new TreeMap<String, Point>();
        ptsf.add(point);
        result.add(point);
        int c = image.getRGB(point.x, point.y);
        while (ptsf.size() > 0)
        {
            if (BackgroundTaskRunner.s_shouldStopBT)
                return result;

            Point sp = ptsf.get(0);
            ArrayList<Point> n = GetNeighbors(sp, image);
            for (Point p : n)
            {
                if (!scanned.containsKey(p.x + "," + p.y) && image.getRGB(p.x, p.y) == c)
                {
                    ptsf.add(p);
                    result.add(p);
                    scanned.put(p.x + "," + p.y,p);
                }
            }
            ptsf.remove(0);
        }
        return result;
    }
    public ArrayList<Point> GetNeighbors(Point p, BufferedImage image)
    {
        ArrayList<Point> result = new ArrayList<Point>();
        /*if (p.x - 1 >= 0 && p.y - 1 >= 0)
        {
            result.add(new Point(p.x - 1, p.y - 1));
        }*/
        if (p.y - 1 >= 0)
        {
            result.add(new Point(p.x, p.y - 1));
        }
        /*if (p.y - 1 >= 0 && p.x + 1 < image.getWidth())
        {
            result.add(new Point(p.x + 1, p.y - 1));
        }*/
        if (p.x + 1 < image.getWidth())
        {
            result.add(new Point(p.x + 1, p.y));
        }
        /*if (p.x + 1 < image.getWidth() && p.y + 1 < image.getHeight())
        {
            result.add(new Point(p.x + 1, p.y + 1));
        }*/
        if (p.y + 1 < image.getHeight())
        {
            result.add(new Point(p.x, p.y + 1));
        }
        /*if (p.x - 1 >= 0 && p.y + 1 < image.getHeight())
        {
            result.add(new Point(p.x - 1, p.y + 1));
        }*/
        if (p.x - 1 >= 0)
        {
            result.add(new Point(p.x - 1, p.y));
        }
        return result;
    }
    @Action
    public void PenClicked()
    {
        m_toolType = 0;
        v_penButton.setBackground(Constants.SelectedButtonBackColor);

        v_fillButton.setBackground(Constants.DefaultButtonBackColor);
        v_eraseButton.setBackground(Constants.DefaultButtonBackColor);
        v_lineButton.setBackground(Constants.DefaultButtonBackColor);
    }

    @Action
    public void FillClicked()
    {
        m_toolType = 1;
        v_fillButton.setBackground(Constants.SelectedButtonBackColor);

        v_penButton.setBackground(Constants.DefaultButtonBackColor);
        v_eraseButton.setBackground(Constants.DefaultButtonBackColor);
        v_lineButton.setBackground(Constants.DefaultButtonBackColor);
    }

    @Action
    public void EraserClicked()
    {
        m_toolType = 2;
        v_eraseButton.setBackground(Constants.SelectedButtonBackColor);

        v_fillButton.setBackground(Constants.DefaultButtonBackColor);
        v_penButton.setBackground(Constants.DefaultButtonBackColor);
        v_lineButton.setBackground(Constants.DefaultButtonBackColor);
    }

    @Action
    public void LoadImage()
    {
        ArrayList<FileFilter> filters = new ArrayList<FileFilter>();
        ArrayList<String> list = new ArrayList<String>();
        list.add(".png");
        list.add(".bmp");
        list.add(".jpg");
        list.add(".jpeg");
        list.add(".gif");
        filters.add(FileOpen.CreateFilter("Image Files",list));
        list = new ArrayList<String>();
        list.add(".png");
        filters.add(FileOpen.CreateFilter("Png Image Files",list));
        list = new ArrayList<String>();
        list.add(".bmp");
        filters.add(FileOpen.CreateFilter("Bmp Image Files",list));
        list = new ArrayList<String>();
        list.add(".jpg");
        list.add(".jpeg");
        filters.add(FileOpen.CreateFilter("Jpg Image Files",list));
        list = new ArrayList<String>();
        list.add(".gif");
        filters.add(FileOpen.CreateFilter("Gif Image Files",list));
        FileOpen open = new FileOpen(this, "Please select an image to use as your map image", filters);
        BufferedImage image;
        try
        {
            if(open.getFile() == null || !open.getFile().exists())
                return;
            image = ImageIO.read(open.getFile());
            BufferedImage oldImage = ClonedImage(m_image);
            SetImage(image);
            CutRedoes();
            SaveBackupPoint(oldImage);
            UpdateUndoRedoControls();
        }
        catch (IOException ex)
        {
            ErrorConsole.getConsole().appendError(ex);
            JOptionPane.showMessageDialog(this, "The file you selected failed to load as the map image. The file may have been saved in a format that is not supported or the image was saved with options that aren't supported.", "Loading Failes", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    @Action
    public void ClearScreen()
    {
        if (JOptionPane.showConfirmDialog(m_walkthroughWindow, "All progress will be lost if you clear the image.\r\n\r\nAre you sure you want to restart?", "Restart", JOptionPane.YES_NO_CANCEL_OPTION) == 0)
        {
            BufferedImage image;
            image = new BufferedImage(m_image.getWidth(), m_image.getHeight(), BufferedImage.TYPE_INT_ARGB);
            Graphics2D g = image.createGraphics();
            g.setColor(Color.WHITE);
            g.fillRect(0, 0, image.getWidth(), image.getHeight());
            BufferedImage oldImage = ClonedImage(m_image);
            SetImage(image);
            CutRedoes();
            UpdateUndoRedoControls();
            SaveBackupPoint(new Rectangle(0,0,oldImage.getWidth(),oldImage.getHeight()), oldImage, false);
        }
    }
    private void SetImage(BufferedImage image)
    {
        m_image = image;
        m_graphics = image.createGraphics();
        m_graphics.setBackground(Color.white);
        m_graphics.setColor(m_currentColor);
        m_graphics.setStroke(new BasicStroke(v_toolSizeSlider.getValue(), BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
        AbsoluteLayout layout = (AbsoluteLayout) v_scrollPanePanel.getLayout();
        layout.removeLayoutComponent(v_drawingLabel);
        layout.addLayoutComponent(v_drawingLabel, new AbsoluteConstraints(new Point(0, 0), new Dimension(image.getWidth(), image.getHeight())));
        v_scrollPanePanel.setLayout(layout);
        v_drawingLabel.setIcon(new ImageIcon(image));
    }
    private void SetImage(Image image)
    {
        BufferedImage bimage = new BufferedImage(image.getWidth(this), image.getHeight(this), BufferedImage.TYPE_INT_ARGB);
        m_graphics = bimage.createGraphics();
        m_graphics.drawImage(image, 0, 0, image.getWidth(this), image.getHeight(this), Color.WHITE, this);
        SetImage(bimage);
    }
    private void DrawImage(Image imageBlock, Rectangle rect)
    {
        m_graphics.drawImage(imageBlock,rect.x, rect.y, rect.width, rect.height, this);
    }
    @Action
    public void UndoClick()
    {
        if(GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex()).CompleteBackup == null)
        {
            ResizeCurrentImage(new Dimension((int)GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex()).Block.getWidth(),(int)GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex()).Block.getHeight()));
        }
        else if(GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex() - 1).CompleteBackup != null && GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex() - 1).CompleteBackup)
        {
            ResizeCurrentImage(new Dimension(GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex() - 1).RedoImageBlock.getImage().getWidth(this),GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex() - 1).RedoImageBlock.getImage().getHeight(this)));
            DrawImage(GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex()).UndoImageBlock.getImage(),GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex()).Block);
        }
        else if(GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex()).CompleteBackup)
        {
            ResizeCurrentImage(new Dimension(GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex() - 1).FullImageSize.width,GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex() - 1).FullImageSize.height));
            DrawImage(GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex()).UndoImageBlock.getImage(),GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex()).Block);
        }
        else
            DrawImage(GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex()).UndoImageBlock.getImage(),GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex()).Block);
        GetMapData().SetBaseImageBackupsIndex(GetMapData().GetBaseImageBackupsIndex() - 1);
        UpdateUndoRedoControls();
    }

    @Action
    public void RedoClick()
    {
        if(GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex() + 1).CompleteBackup == null)
        {
            ResizeCurrentImage(new Dimension((int)GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex() + 1).FullImageSize.getWidth(),(int)GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex() + 1).FullImageSize.getHeight()));
        }
        else if (GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex() + 1).CompleteBackup)
        {
            ResizeCurrentImage(new Dimension(GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex() + 1).RedoImageBlock.getImage().getWidth(this), GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex() + 1).RedoImageBlock.getImage().getHeight(this)));
            DrawImage(GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex() + 1).RedoImageBlock.getImage(), new Rectangle(0,0,GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex() + 1).RedoImageBlock.getImage().getWidth(this), GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex() + 1).RedoImageBlock.getImage().getHeight(this)));
        }
        else
            DrawImage(GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex() + 1).RedoImageBlock.getImage(), GetMapData().GetBaseImageBackups().get(GetMapData().GetBaseImageBackupsIndex() + 1).Block);
        GetMapData().SetBaseImageBackupsIndex(GetMapData().GetBaseImageBackupsIndex() + 1);
        UpdateUndoRedoControls();
    }
    private BufferedImage ClonedImage(BufferedImage image)
    {
        BufferedImage result = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_ARGB);
        result.createGraphics().drawImage(image, 0, 0, this);
        return result;
    }
    @Override
    public Boolean SendGMessage(Object obj)
    {
        if (obj instanceof Dimension)
        {
            Dimension oldImageSize = new Dimension(m_image.getWidth(), m_image.getHeight());
            ResizeCurrentImage((Dimension) obj);
            CutRedoes();
            UpdateUndoRedoControls();
            SaveBackupPoint(new Rectangle(0,0,oldImageSize.width,oldImageSize.height), null, null);
            return true;
        }
        return false;
    }
    private void ResizeCurrentImage(Dimension newSize)
    {
        BufferedImage result = new BufferedImage(newSize.width, newSize.height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = result.createGraphics();
        g.setBackground(Color.WHITE);
        g.clearRect(0, 0, newSize.width, newSize.height);
        g.drawImage(m_image, 0, 0, this);
        SetImage(result);
    }
    @Action
    public void ResizeImage()
    {
        ImageResizeWindow window = new ImageResizeWindow(m_walkthroughWindow);
        window.InitControls(new Dimension(m_image.getWidth(),m_image.getHeight()),this);
        window.setVisible(true);
    }
    JColorChooser m_colorChooser = new JColorChooser(m_currentColor);
    @Action
    public void ColorClicked()
    {
        Color c = m_colorChooser.showDialog(this, "Select a drawing color", m_currentColor);
        if (c != null)
        {
            v_colorButton.setBackground(c);
            m_currentColor = c;
            m_graphics.setColor(m_currentColor);
        }
    }

    @Action
    public void LineClicked()
    {
        m_toolType = 3;
        v_lineButton.setBackground(Constants.SelectedButtonBackColor);

        v_penButton.setBackground(Constants.DefaultButtonBackColor);
        v_fillButton.setBackground(Constants.DefaultButtonBackColor);
        v_eraseButton.setBackground(Constants.DefaultButtonBackColor);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton v_clearImageButton;
    private javax.swing.JButton v_colorButton;
    private javax.swing.JLabel v_drawingLabel;
    private javax.swing.JButton v_eraseButton;
    private javax.swing.JButton v_fillButton;
    private javax.swing.JButton v_lineButton;
    private javax.swing.JButton v_loadImageButton;
    private javax.swing.JButton v_penButton;
    private javax.swing.JButton v_redoButton;
    private javax.swing.JButton v_resizeButton;
    private javax.swing.JScrollPane v_scrollPane;
    private javax.swing.JPanel v_scrollPanePanel;
    private javax.swing.JSlider v_toolSizeSlider;
    private javax.swing.JPanel v_toolbarPanel;
    private javax.swing.JButton v_undoButton;
    // End of variables declaration//GEN-END:variables

}
