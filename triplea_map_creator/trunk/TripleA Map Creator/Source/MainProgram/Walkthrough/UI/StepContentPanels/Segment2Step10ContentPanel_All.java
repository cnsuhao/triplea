/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BaseStepContentPanel.java
 *
 * Created on May 14, 2010, 5:31:50 PM
 */

package MainProgram.Walkthrough.UI.StepContentPanels;

import MainProgram.Map.MapData;
import MainProgram.Map.MapProperty;
import MainProgram.Map.MapPropertyType;
import java.awt.FlowLayout;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.SpinnerNumberModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Stephen
 */
public class Segment2Step10ContentPanel_All extends BaseStepContentPanel
{
    public Segment2Step10ContentPanel_All()
    {
        initComponents();
    }
    
    private TreeMap<String, MapProperty> m_properties = new TreeMap<String, MapProperty>();    

    @Override
    public boolean WaitForPanelClose()
    {
        return true;
    }
    
    @Override
    public void InitControls()
    {
        VerifyProperties(GetMapData().GetMapProperties());
        m_properties = GetMapData().GetMapProperties();
        v_mapPropertyListTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
    }
    
    private void VerifyProperties(TreeMap<String, MapProperty> properties)
    {
        MapData mapData = GetMapData();
        ArrayList<String> problemProperties = new ArrayList<String>();
        for (Entry<String, MapProperty> entry : properties.entrySet())
        {
            String name = entry.getKey();
            MapProperty prop = entry.getValue();
            
            //TODO: Add property verification code
        }
        if (problemProperties.size() > 0)
        {
            if (JOptionPane.showConfirmDialog(this, "Some of the map property values refer to players or territories that no longer exist. Do you want to reset the values of each of these map properties?", "Reset Invalid Map Property Values", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
            {
                for (String name : problemProperties)
                    mapData.GetMapProperties().remove(name);
            }
        }
        
        //Now loop through the map properties and set prop.value to default value wherever missing
        for(String name : mapData.GetMapProperties().keySet())
        {
            if(!properties.containsKey(name))
                properties.put(name, new MapProperty(name, null, false)); //In the future, set to default value here
        }
    }
    
    @Override
    public void ProcessControlContentToMapData()
    {
        if (m_currentProp != null)
        {
            MapProperty prop = CreateMapPropertyFromValuePanel();
            m_properties.put(m_currentProp, prop);
        }
        GetMapData().SetMapProperties(m_properties);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        v_mapPropListTreeScrollPane = new javax.swing.JScrollPane();
        v_mapPropertyListTree = new javax.swing.JTree();
        v_propValuePanel = new javax.swing.JPanel();
        v_labelAlignHelper2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        v_labelAlignHelper = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        v_propIsEditable = new javax.swing.JCheckBox();

        v_mapPropListTreeScrollPane.setName("v_mapPropListTreeScrollPane"); // NOI18N

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Properties");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("General");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("4th Edition");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Pacific Edition");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Anniversary Edition");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Production");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("LHTR Carrier production rules");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Anniversary Edition Land Production");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Anniversary Edition Air Naval");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("SBR Affects Unit Production");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Technology");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Selectable Tech Roll");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("AA50 Tech Model");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Tech Development");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Continuous Research");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Battles");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("neutralCharge");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Two hit battleship");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Partial Amphibious Retreat");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("All Rockets Attack");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Random AA Casualties");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Roll AA Individually");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("SBR Victory Points");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Allied Air Dependents");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Defending Subs Sneak Attack");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Attacker Retreat Planes");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Surviving Air Move To Land");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Sub Retreat Before Battle");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Victories");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Total Victory");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Honorable Surrender");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Projection of Power");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("No Economic Victory");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Limits");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Limit SBR Damage To Factory Production");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Limit SBR Damage Per Turn");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Limit Rocket Damage Per Turn");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Territory Turn Limit");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Restrictions");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("maxFactoriesPerTerritory");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Neutrals Are Impassable");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Rockets Can Violate Neutrality");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Rockets Can Fly Over Impassables");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Placement Restricted By Factory");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Transport Restricted Unload");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Rocket Attack Per Factory Restricted");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Naval Bombard Casualties Return Fire Restricted");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Blitz Through Factories And AA Restricted");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Unit Placement In Enemy Seas");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Sub Control Sea Zone Restricted");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Production Per X Territories Restricted");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Production Per Valued Territory Restricted");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Place in Any Territory");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Unit Placement Per Territory Restricted");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Movement By Territory Restricted");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Transport Casualties Restricted");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Air Attack Sub Restricted");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Sub Retreat DD Restricted");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Shore Bombard Per Ground Unit Restricted");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("AA Territory Restricted");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Miscellaneous");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Always on AA");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Transport Control Sea Zone");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Ignore Transport In Movement");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Ignore Sub In Movement");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Hari-Kari Units");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Unplaced units live when not placed");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("National Objectives");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Special");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Occupied Territories");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        v_mapPropertyListTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        v_mapPropertyListTree.setName("v_mapPropertyListTree"); // NOI18N
        v_mapPropertyListTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                v_mapPropertyListTreeValueChanged(evt);
            }
        });
        v_mapPropListTreeScrollPane.setViewportView(v_mapPropertyListTree);

        v_propValuePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        v_propValuePanel.setName("v_propValuePanel"); // NOI18N
        v_propValuePanel.setLayout(new java.awt.GridLayout());

        v_labelAlignHelper2.setName("v_labelAlignHelper2"); // NOI18N
        v_labelAlignHelper2.setLayout(new java.awt.GridBagLayout());

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(Segment2Step10ContentPanel_All.class);
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        v_labelAlignHelper2.add(jLabel2, gridBagConstraints);

        v_labelAlignHelper.setName("v_labelAlignHelper"); // NOI18N
        v_labelAlignHelper.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        v_labelAlignHelper.add(jLabel3, gridBagConstraints);

        v_propIsEditable.setText(resourceMap.getString("v_propIsEditable.text")); // NOI18N
        v_propIsEditable.setName("v_propIsEditable"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(v_labelAlignHelper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(v_mapPropListTreeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(v_propIsEditable)
                    .addComponent(v_propValuePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                    .addComponent(v_labelAlignHelper2, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(v_labelAlignHelper, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(v_labelAlignHelper2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(v_mapPropListTreeScrollPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(v_propIsEditable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(v_propValuePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void v_mapPropertyListTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_v_mapPropertyListTreeValueChanged
    {//GEN-HEADEREND:event_v_mapPropertyListTreeValueChanged
        if(m_currentProp != null)
        {
            MapProperty prop = CreateMapPropertyFromValuePanel();
            m_properties.put(m_currentProp, prop);
        }
        
        TreePath selectionPath = v_mapPropertyListTree.getSelectionModel().getSelectionPath();
        if(selectionPath != null && selectionPath.getPathCount() == 3) //User actually clicked property
            m_currentProp = selectionPath.getLastPathComponent().toString();
        else
            m_currentProp = null;
        
        UpdateValueArea(m_currentProp);
    }//GEN-LAST:event_v_mapPropertyListTreeValueChanged

    private String m_currentProp = null;
    private void UpdateValueArea(String propName)
    {
        v_propValuePanel.removeAll();
        v_propIsEditable.setSelected(false);
        if(propName != null)
        {
            MapProperty prop = m_properties.get(propName);
            MapPropertyType propertyType = GetPropType(propName);
            
            if(prop != null)
                v_propIsEditable.setSelected(prop.IsEditable());
            else
                v_propIsEditable.setSelected(false); //Default

            if (propertyType == MapPropertyType.Base_String)
            {
                JTextArea textbox = new JTextArea();
                if(prop != null)
                    textbox.setText(prop.GetValue().toString());
                
                v_propValuePanel.add(textbox);                
            }
            else if (propertyType == MapPropertyType.Integer)
            {
                JPanel panel = new JPanel();
                panel.setLayout(new FlowLayout(FlowLayout.CENTER));
                
                JSpinner spinner = new JSpinner();
                int val = 0;
                if(prop != null)
                    val = Integer.parseInt(prop.GetValue().toString());
                spinner.setModel(new SpinnerNumberModel(val, 0, 5000, 1));                
                
                panel.add(spinner);
                
                v_propValuePanel.add(panel);
            }
            else if (propertyType == MapPropertyType.Boolean)
            {
                JPanel panel = new JPanel();
                panel.setLayout(new FlowLayout(FlowLayout.CENTER));
                
                JCheckBox checbox = new JCheckBox();
                if(prop != null)
                    checbox.setSelected(Boolean.parseBoolean(prop.GetValue().toString()));          
                
                panel.add(checbox);
                
                v_propValuePanel.add(panel);
            }
        }
        
        v_propValuePanel.validate(); //Make sure it shows up
    }
    
    private MapProperty CreateMapPropertyFromValuePanel()
    {
        MapPropertyType propType = GetPropType(m_currentProp);
        
        if(propType == MapPropertyType.Base_String)
        {
            String value = ((JTextArea)v_propValuePanel.getComponent(0)).getText();
            return new MapProperty(m_currentProp, value, v_propIsEditable.isSelected());
        }
        else if(propType == MapPropertyType.Integer)
        {
            JSpinner spinner = ((JSpinner)((JPanel)v_propValuePanel.getComponent(0)).getComponent(0));
            try{spinner.commitEdit();}catch (Exception ex){}
            int value = Integer.parseInt(spinner.getValue().toString());
            return new MapProperty(m_currentProp, value, v_propIsEditable.isSelected());
        }
        else if(propType == MapPropertyType.Boolean)
        {
            boolean value = ((JCheckBox)((JPanel)v_propValuePanel.getComponent(0)).getComponent(0)).isSelected();
            return new MapProperty(m_currentProp, value, v_propIsEditable.isSelected());
        }
        
        return null;
    }
    
    private static MapPropertyType GetPropType(String propName)
    {
        MapPropertyType propertyType = MapPropertyType.Base_String;
        if (s_propertyTypes.containsKey(propName))
            propertyType = s_propertyTypes.get(propName);
        return propertyType;
    }
    private static HashMap<String, MapPropertyType> s_propertyTypes = new HashMap<String, MapPropertyType>();
    static
    {
        //Only assign property types when the property type is different than the default, Base_String.
        //Also, only do it when you're sure about the type, otherwise users may be unable to set real prop value (String always works)
        HashMap<String, MapPropertyType> map = new HashMap<String, MapPropertyType>();
        
        //General
        map.put("4th Edition", MapPropertyType.Boolean);
        map.put("Pacific Edition", MapPropertyType.Boolean);
        map.put("Anniversary Edition", MapPropertyType.Boolean);
        
        //Production
        map.put("LHTR Carrier production rules", MapPropertyType.Boolean);
        map.put("Anniversary Edition Land Production", MapPropertyType.Boolean);
        map.put("Anniversary Edition Air Naval", MapPropertyType.Boolean);
        map.put("SBR Affects Unit Production", MapPropertyType.Boolean);
        
        //Technology
        map.put("Selectable Tech Roll", MapPropertyType.Boolean);
        map.put("AA50 Tech Model", MapPropertyType.Boolean);
        map.put("Tech Development", MapPropertyType.Boolean);
        map.put("Continuous Research", MapPropertyType.Boolean);
        
        //Battles
        map.put("neutralCharge", MapPropertyType.Integer);
        map.put("Two hit battleship", MapPropertyType.Boolean);
        map.put("Partial Amphibious Retreat", MapPropertyType.Boolean);
        map.put("All Rockets Attack", MapPropertyType.Boolean);
        map.put("Random AA Casualties", MapPropertyType.Boolean);
        map.put("Roll AA Individually", MapPropertyType.Boolean);
        map.put("SBR Victory Points", MapPropertyType.Boolean);
        map.put("Allied Air Dependents", MapPropertyType.Boolean);
        map.put("Defending Subs Sneak Attack", MapPropertyType.Boolean);
        map.put("Attacker Retreat Planes", MapPropertyType.Boolean);
        map.put("Surviving Air Move To Land", MapPropertyType.Boolean);
        map.put("Sub Retreat Before Battle", MapPropertyType.Boolean);
        
        //Victories
        map.put("Total Victory", MapPropertyType.Boolean);
        map.put("Honorable Surrender", MapPropertyType.Boolean);
        map.put("Projection of Power", MapPropertyType.Boolean);
        map.put("No Economic Victory", MapPropertyType.Boolean);
        
        //Limits
        map.put("Limit SBR Damage To Factory Production", MapPropertyType.Boolean);
        map.put("Limit SBR Damage Per Turn", MapPropertyType.Boolean);
        map.put("Limit Rocket Damage Per Turn", MapPropertyType.Boolean);
        map.put("Territory Turn Limit", MapPropertyType.Boolean);
        
        //Restrictions
        map.put("maxFactoriesPerTerritory", MapPropertyType.Integer);
        map.put("Neutrals Are Impassable", MapPropertyType.Boolean);
        map.put("Rockets Can Violate Neutrality", MapPropertyType.Boolean);
        map.put("Rockets Can Fly Over Impassables", MapPropertyType.Boolean);        
        map.put("Placement Restricted By Factory", MapPropertyType.Boolean);
        map.put("Transport Restricted Unload", MapPropertyType.Boolean);
        map.put("Rocket Attack Per Factory Restricted", MapPropertyType.Boolean);
        map.put("Naval Bombard Casualties Return Fire Restricted", MapPropertyType.Boolean);
        map.put("Blitz Through Factories And AA Restricted", MapPropertyType.Boolean);
        map.put("Unit Placement In Enemy Seas", MapPropertyType.Boolean);
        map.put("Sub Control Sea Zone Restricted", MapPropertyType.Boolean);
        map.put("Production Per X Territories Restricted", MapPropertyType.Boolean);
        map.put("Production Per Valued Territory Restricted", MapPropertyType.Boolean);
        map.put("Place in Any Territory", MapPropertyType.Boolean);
        map.put("Unit Placement Per Territory Restricted", MapPropertyType.Boolean);
        map.put("Movement By Territory Restricted", MapPropertyType.Boolean);
        map.put("Transport Casualties Restricted", MapPropertyType.Boolean);
        map.put("Air Attack Sub Restricted", MapPropertyType.Boolean);
        map.put("Sub Retreat DD Restricted", MapPropertyType.Boolean);
        map.put("Shore Bombard Per Ground Unit Restricted", MapPropertyType.Boolean);
        map.put("AA Territory Restricted", MapPropertyType.Boolean);
        
        //Miscellaneous
        map.put("Always on AA", MapPropertyType.Boolean);
        map.put("Transport Control Sea Zone", MapPropertyType.Boolean);
        map.put("Ignore Transport In Movement", MapPropertyType.Boolean);
        map.put("Ignore Sub In Movement", MapPropertyType.Boolean);        
        map.put("Hari-Kari Units", MapPropertyType.Boolean);
        map.put("Unplaced units live when not placed", MapPropertyType.Boolean);
        map.put("National Objectives", MapPropertyType.Boolean);
        
        //Special
        map.put("Occupied Territories", MapPropertyType.Boolean);
        
        s_propertyTypes = map;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel v_labelAlignHelper;
    private javax.swing.JPanel v_labelAlignHelper2;
    private javax.swing.JScrollPane v_mapPropListTreeScrollPane;
    private javax.swing.JTree v_mapPropertyListTree;
    private javax.swing.JCheckBox v_propIsEditable;
    private javax.swing.JPanel v_propValuePanel;
    // End of variables declaration//GEN-END:variables
}
